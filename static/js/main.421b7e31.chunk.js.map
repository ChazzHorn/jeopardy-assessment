{"version":3,"sources":["components/nomatch/PurpleImg.png","components/welcome/Welcome.js","components/clock/Clock.js","components/contact/Contact.js","components/navigation/Navigation.js","components/nomatch/noMatch.js","jeopardyService.js","components/display/Display.js","components/jeopardy/Jeopardy.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Welcome","props","className","name","Clock","state","date","Date","this","timerId","setInterval","tick","clearInterval","setState","toLocaleTimeString","Component","Contact","handleChange","event","formData","target","value","handleSubmit","preventDefault","submitted","resetForm","firstName","lastName","onClick","onSubmit","htmlFor","type","onChange","Navigation","to","noMatch","src","Purple","alt","JeopardyService","url","client","axios","create","get","Display","console","log","answer","score","question","category","userAnswer","changeScore","Jeopardy","data","prevstate","getNewQuestion","getQuestion","then","result","title","App","exact","path","render","match","params","component","Boolean","window","location","hostname","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.421b7e31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/PurpleImg.67212b62.png\";","import React from \"react\";\n\nfunction Welcome(props) {\n  return <div className=\"Welcome\">Welcome, {props.name}!</div>;\n}\n\nexport default Welcome;\n","import React, { Component } from \"react\";\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      date: new Date(),\n    };\n  }\n\n  componentDidMount() {\n    this.timerId = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  tick() {\n    this.setState({\n      date: new Date(),\n    });\n  }\n\n  render() {\n    return <h2 className=\"Clock\">{this.state.date.toLocaleTimeString()}</h2>;\n  }\n}\n\nexport default Clock;\n","\nimport React, { Component } from \"react\";\n\nclass Contact extends Component{\n    constructor(props){\n        super(props);\n\n\n        this.state = {\n            submitted: false,\n\n            formData: {\n                firstName: '',\n                lastName: ''\n            }\n\n        }\n    }\n    \n    handleChange =(event) => {\n        const formData = {...this.state.formData};\n        formData[event.target.name] = event.target.value\n\n        this.setState({formData})\n    }\n    handleSubmit = (event)=> {\n        event.preventDefault();\n\n        this.setState({\n            submitted: true\n        });\n    }\n    resetForm=(event)=>{\n        this.setState({\n\n            submitted: false,\n            formData: {\n                firstName:'',\n                lastName: ''\n            }\n        });\n    }\n    \n    render(){\n        if(this.state.submitted){\n            return(\n                <div>\n        <p>Thank you, {this.state.formData.firstName}, for you submittion!</p>\n        <button onClick={this.resetForm}>Reset Form</button>\n                </div>\n            )}\n\n        return(\n            <div className='Contact'>\n                <form onSubmit={this.handleSubmit}>\n                    <div>\n                       <label htmlFor=\"firstName\">First Name:</label>\n                       <input \n                       type=\"text\" \n                       name=\"firstName\" \n                       value={this.state.formData.firstName}\n                       onChange={this.handleChange}/>\n                    </div>\n                    <div>\n                       <label htmlFor=\"lastName\">Last Name:</label>\n                       <input \n                       type=\"text\" \n                       name=\"lastName\" \n                       value={this.state.formData.lastName}\n                       onChange={this.handleChange}/>\n                    </div>\n                    <button>Submit Form</button>\n                </form>\n\n\n            <div>\n            {this.state.formData.firstName}\n            <br/>\n            {this.state.formData.lastName}\n\n            </div>\n\n            </div>\n    \n        )\n    }\n}\n\n\nexport default Contact;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nfunction Navigation(props){\n    return (\n        <div className='Navigation'>\n            \n            <ul>\n            <li><Link to=\"/\">Home</Link></li>\n            <li><Link to=\"/clock\">Clock</Link></li>\n            <li><Link to=\"/contact\">Contact</Link></li>\n            <li><Link to=\"/jeopardy\">Jeopardy</Link></li>\n            </ul>\n\n        </div>\n    )\n}\nexport default Navigation","import React from \"react\";\nimport Purple from \"../../../src/components/nomatch/PurpleImg.png\"\n\nfunction noMatch(props){\n    return(\n        <div>\n<h1 className='MessageCenter'>ERROR 404: No Match</h1>\n<img className='PurpleImg' src={Purple} alt=\"Logo\" />\n</div>\n);\n}\nexport default noMatch","import axios from 'axios';\nclass JeopardyService {\n    constructor(url = 'http://jservice.io/api/random', client = axios.create()){\n        this.url = url;\n        this.client = client;\n    }\n    \n    getQuestion(){\n        return this.client.get(this.url);\n    }\n}\nexport default JeopardyService;\n","import React from 'react';\n// import Jeopardy from \"../../components/jeopardy/Jeopardy\"\n\nfunction Display(props){\n    \n    // let category =\"loading\" \n\n    \n\n    return (\n        <div>\n            \n          {console.log(props.answer)}\n          \n        <strong>Score:</strong>\n        {props.score}\n        <br/>\n          <strong>Question:</strong>\n        {props.question}\n        <br/>\n        <strong>Value:</strong>\n        {props.value}\n        <br/>\n        <strong>Category:</strong>\n        {props.category}\n        \n\n\n        <form onSubmit={props.handleSubmit}>\n        <div>\n\n             <label htmlFor=\"userAnwser\">Answer:</label>\n            <input \n                type=\"text\" \n                name=\"userAnswer\" \n                value={props.userAnswer}\n                onChange={props.handleChange}\n            />\n\n        </div>\n        <button onClick={props.changeScore}>Submit Answer</button>\n        </form>\n    <div>{props.userAnswer}</div>\n\n      </div>\n    );\n\n       \n    \n}\nexport default Display","import React, { Component } from 'react';\n//import our service\nimport JeopardyService from \"../../jeopardyService\";\nimport Display from '../display/Display';\nclass Jeopardy extends Component {\n  //set our initial state and set up our service as this.client on this component\n  constructor(props){\n    super(props);\n    this.client = new JeopardyService();\n    this.state = {\n      data: {\n        // category: \"\",\n      },\n      \n      score: 0,\n      submitted: false,\n\n      formData: {\n        userAnswer: ''\n    }\n    }\n  }\n\n  \n  //get a new random question from the API and add it to the data object in state\n  getNewQuestion() {\n    return this.client.getQuestion().then(result => {\n      this.setState({\n        data: result.data[0]\n      })\n    })\n  }\n\n\n  handleChange =(event) => {\n    const formData = {...this.state.formData};\n    formData[event.target.name] = event.target.value;\n\n    this.setState({formData})\n}\n\nhandleSubmit = (event)=> {\n    event.preventDefault();\n\n    this.setState({\n        submitted: true\n    });\n}\n  //when the component mounts, get a the first question\n  componentDidMount() {\n    this.getNewQuestion();\n  }\n\n  changeScore=(event)=>{\n   \n      if(this.state.formData.userAnswer === this.state.data.answer){\n          this.setState(prevstate => ({\n            score: prevstate.score += this.state.data.value\n          }))\n        }else if (this.state.formData.userAnswer  === ''){\n          this.setState(prevstate => ({\n            score: prevstate.score \n          }))\n        \n      }else if(this.state.formData.userAnswer !== this.state.data.answer){\n        this.setState(prevstate => ({\n          score: prevstate.score -= this.state.data.value\n        }))\n      }\n      this.getNewQuestion()\n  }\n\n\n\n  //display the results on the screen\n  render() {\n    let category =\"loading\"\n    \n    if(this.state.data.category && this.state.data.category.title){\n        \n      category = this.state.data.category.title\n   }\n\n    return(\n      <Display \n      score={this.state.score} \n      question={this.state.data.question} \n      value={this.state.data.value} \n      answer={this.state.data.answer} \n      userAnswer={this.state.formData.userAnswer}\n      category={category}\n      // title={category}\n      handleChange={this.handleChange}\n      handleSubmit={this.handleSubmit}\n      changeScore={this.changeScore}\n      />\n    )\n  }\n}\nexport default Jeopardy;","import React from \"react\";\nimport { Route, Switch } from 'react-router-dom';\n\nimport \"./App.css\";\nimport Welcome from \"./components/welcome/Welcome\";\nimport Clock from \"./components/clock/Clock\";\nimport Contact from \"./components/contact/Contact\";\nimport Navigation from \"./components/navigation/Navigation\";\nimport noMatch from \"./components/nomatch/noMatch\";\nimport Jeopardy from \"./components/jeopardy/Jeopardy\";\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Navigation/>\n     \n      \n      <Switch>\n      <Route \n      exact path=\"/\" \n      render={(props) => <Welcome {...props} name='Chaxx' />}\n      />\n      <Route \n      exact path=\"/welcome/:name\" \n      render={(props) => <Welcome {...props} name={props.match.params.name}/>}\n      />\n      <Route exact path=\"/clock\" component={Clock} />\n      <Route exact path=\"/contact\" component={Contact} />\n      <Route exact path=\"/jeopardy\" component={Jeopardy} />\n       <Route path=\"*\" component={noMatch}/>\n      </Switch>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <BrowserRouter basename=\"/react-welcome-clock-demo1\" > \n    <App /> \n    </BrowserRouter>\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}